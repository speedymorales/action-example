name: Deploy To Dev
on:
  workflow_dispatch:
  push:
    branches: [develop]

env:
  DEV_LATEST_TAG: ${{ github.repository }}:dev-latest
  DEV_LABEL: ${{ github.event.repository.name }}-dev

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - working-directory: backend
        run: npm ci
      - working-directory: backend
        run: npm run build --if-present

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: backend/dist/

  package:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: backend/dist/

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: backend/Dockerfile
          context: ./backend
          push: true
          tags: ${{ env.DEV_LATEST_TAG }}

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: package
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Deploy NodeJS Container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{secrets.SSH_HOST}} # IP address of the server you wish to ssh into
          key: ${{secrets.SSH_KEY}} # Private or public key of the server
          username: ${{ secrets.SSH_USERNAME }} # User of the server you want to ssh into

          script: |
            docker pull ${{ env.DEV_LATEST_TAG }}
            docker ps -aq --filter "name=${{ env.DEV_LABEL }}" | xargs -r docker rm -f
            docker rmi $(docker images -f "dangling=true" -q)
            docker run -p 3001:3000 --network=local_network --env-file /home/abicus/.env.dev -d --name=${{ env.DEV_LABEL }} ${{ env.DEV_LATEST_TAG }}
            echo 'Deployment successful to digital ocean'
