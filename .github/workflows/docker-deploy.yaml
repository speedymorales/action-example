name: Deploy
on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  DEV_LATEST_TAG: ${{ github.repository }}:dev-latest

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - run: npm ci
      - run: npm run build --if-present

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  package:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      # - name: Debug
      #   run: |
      #     echo "github.ref -> {{ github.ref }}"

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMG_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref_type != 'tag' }}

      - name: Debug
        run: |
          echo "steps.metadata.outputs.tags -> ${{ steps.metadata.outputs.tags }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.DEV_LATEST_TAG }}
          # tags: ${{ steps.metadata.outputs.tags }}
          # push: ${{ github.event.base_ref =='refs/heads/main' && github.ref_type == 'tag' && !startsWith(github.ref, 'refs/tags/v0.')}}
          # tags: ${{ steps.metadata.outputs.tags }}
          # labels: ${{ steps.metadata.outputs.labels }}

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: package
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Deploy NodeJS Container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{secrets.SSH_HOST}} # IP address of the server you wish to ssh into
          key: ${{secrets.SSH_KEY}} # Private or public key of the server
          username: ${{ secrets.SSH_USERNAME }} # User of the server you want to ssh into

          script: |
            docker pull ${{ env.DEV_LATEST_TAG }}
            docker stop ${{ github.repository }} || true
            docker ps -aq --filter "name=${{ github.repository }}" | xargs -r docker rm -f
            docker run -p 3000:3000 --name=${{ github.repository }} ${{ env.DEV_LATEST_TAG }}
            echo 'Deployment successful to digital ocean'
